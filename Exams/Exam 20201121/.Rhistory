q_table
source('C:/Users/vicke/OneDrive - Linköpings universitet/advML/Tenta/Assignment2.R')
source('C:/Users/vicke/OneDrive - Linköpings universitet/advML/Tenta/Assignment2.R')
source('C:/Users/vicke/OneDrive - Linköpings universitet/advML/Tenta/Assignment2.R')
plot(MovingAverage(rewards,100),type = "l", xlab="Episode", ylab="Reward", main= "Regular Q-Learning")
plot(MovingAverage(alt_rewards,100),type = "l", xlab="Episode", ylab="Reward", main="Alternative Q-Learning")
mean(rewards)
mean(alt_rewards)
plot(MovingAverage(test.rewards,100),type = "l", xlab="Episode", ylab="Reward", main= "Regular Q-Learning")
plot(MovingAverage(test.alt_rewards,100),type = "l", xlab="Episode", ylab="Reward", main="Alternative Q-Learning")
graphics.off()
par(mfrow=c(2,1))
plot(MovingAverage(test.rewards,100),type = "l", xlab="Episode", ylab="Reward", main= "Regular Q-Learning")
plot(MovingAverage(test.alt_rewards,100),type = "l", xlab="Episode", ylab="Reward", main="Alternative Q-Learning")
source('C:/Users/vicke/OneDrive - Linköpings universitet/advML/Tenta/Assignment3.R')
source('C:/Users/vicke/OneDrive - Linköpings universitet/advML/Tenta/Assignment3.R')
source('C:/Users/vicke/OneDrive - Linköpings universitet/advML/Tenta/Assignment3.R')
par(mfrow=c(1,1))
graphics.off()
par(mfrow=c(1,1))
X = c(-1.0, -0.6, -0.2, 0.4, 0.8)
y = c(0.768, -0.044, -0.940, 0.719, -0.664)
sigmaNoise = 0.1
Xstar = seq(-1,1,length=10)
gpParam = posteriorGP(X, y, Xstar, sigmaNoise, kernelMaker())
plotGP(gpParam$fmean, gpParam$fvar, Xstar, X, y)
gpParam = posteriorGP(scale(X), scale(Y),
scale(xStar), sigmaN_scaled, kernelWrapper(sigmaF = 1, l = 1))
gpParam = posteriorGP(scale(X), scale(Y),
scale(xStar), sigmaN_scaled, kernelMaker(sigmaF = 1, l = 1))
gpParam = posteriorGP(scale(X), scale(Y),
scale(xStar), sigmaN_scaled, kernelMaker(sigmaF = 1, l = 1))
gpParam = posteriorGP(scale(X), scale(Y),
scale(Xstar), sigmaN_scaled, kernelMaker(sigmaF = 1, l = 1))
gpParam = posteriorGP(scale(X), scale(Y),
scale(Xstar), sigmaN_scaled/var(y), kernelMaker(sigmaF = 1, l = 1))
gpParam = posteriorGP(scale(X), scale(Y),
scale(Xstar), sigmaNoise/var(y), kernelMaker(sigmaF = 1, l = 1))
gpParam = posteriorGP(scale(X), scale(y),
scale(Xstar), sigmaNoise/var(y), kernelMaker(sigmaF = 1, l = 1))
fmean_unscaled = mean(y) + gpParam$fmean*sd(y)
fvar_unscaled = gpParam$fvar*sd(y)^2
plotGP(fmean_unscaled, fvar_unscaled, xStar, x, y, sigmaN)
plotGP(fmean_unscaled, fvar_unscaled, Xstar, x, y, sigmaNoise)
plotGP(fmean_unscaled, fvar_unscaled, Xstar, X, y, sigmaNoise)
gpParam = posteriorGP(X, y, Xstar, sigmaNoise, kernelMaker(sigmaF=1, l=0.3))
plotGP(gpParam$fmean, gpParam$fvar, Xstar, X, y)
gpParam = posteriorGP(X, y, Xstar, sigmaNoise, kernelMaker(sigmaF=1, l=0.3))
plotGP(gpParam$fmean, gpParam$fvar, Xstar, X, y)
gpParam = posteriorGP(scale(X), scale(y),
scale(Xstar), sigmaNoise/var(y), kernelMaker(sigmaF = 1, l = 1))
fmean_unscaled = mean(y) + gpParam$fmean*sd(y)
fvar_unscaled = gpParam$fvar*sd(y)^2
plotGP(fmean_unscaled, fvar_unscaled, Xstar, X, y, sigmaNoise)
par(mfrow=c(1,2))
graphics.off()
par(mfrow=c(1,2))
X = c(-1.0, -0.6, -0.2, 0.4, 0.8)
y = c(0.768, -0.044, -0.940, 0.719, -0.664)
sigmaNoise = 0.1
Xstar = seq(-1,1,length=10)
gpParam = posteriorGP(X, y, Xstar, sigmaNoise, kernelMaker(sigmaF=1, l=0.3))
plotGP(gpParam$fmean, gpParam$fvar, Xstar, X, y)
gpParam = posteriorGP(scale(X), scale(y),
scale(Xstar), sigmaNoise/var(y), kernelMaker(sigmaF = 1, l = 1))
fmean_unscaled = mean(y) + gpParam$fmean*sd(y)
fvar_unscaled = gpParam$fvar*sd(y)^2
plotGP(fmean_unscaled, fvar_unscaled, Xstar, X, y, sigmaNoise)
source('C:/Users/vicke/OneDrive - Linköpings universitet/advML/Tenta/Assignment3.R')
source('C:/Users/vicke/OneDrive - Linköpings universitet/advML/Tenta/Assignment3.R')
# (1)
gpParam$fvar
# (1)
diag(gpParam$fvar)
# (1)
plot(x=Xstar, y=diag(gpParam$fvar))
source('C:/Users/vicke/OneDrive - Linköpings universitet/advML/Tenta/Assignment3.R')
gpParam = posteriorGP(X, y, Xstar, sigmaNoise, kernelMaker(sigmaF=1, l=0.3))
plotGP(gpParam$fmean, gpParam$fvar, Xstar, X, y)
v = getVar(kernelMaker(sigmaF=1, l=0.3), X, Xstar, 0)
getVar = function (k, x, xstar, sigmaN){
n = length(x)
I = diag(n)
Kss = kernelMatrix(kernel = k, x = xstar, y = xstar)
Ksx = kernelMatrix(kernel = k, x = xstar, y = x)
Kxs = t(Ksx)
Kxx = kernelMatrix(kernel = k, x = x, y = x)
V = Kss - Ksx %*% solve( Kxx + sigmaN^2 * I ) %*% Kxs
return(diag(V))
}
v = getVar(kernelMaker(sigmaF=1, l=0.3), X, Xstar, 0)
# (1)
library("kernlab")
v = getVar(kernelMaker(sigmaF=1, l=0.3), X, Xstar, 0)
v
plot(v)
posteriorGP = function (X, y, Xstar, sigmaNoise, k){
kstar = k(X,Xstar)
L = chol(k(X,X)+sigmaNoise^2*diag(length(X)))
L = t(L)
alpha = solve(t(L), solve(L,y))
fMean = t(kstar) %*% alpha
v = solve(L,kstar)
fVar = k(Xstar, Xstar)-t(v)%*%v
logMarginalLike = -0.5*(t(y)%*%alpha)-sum(diag(L))-length(y)/2*log(2*pi)
return (list(fmean=fMean, fvar=fVar, logLike=logMarginalLike))
}
kstar = k(X,Xstar)
posteriorGP = function (X, y, Xstar, sigmaNoise, k){
kstar = k(X,Xstar)
L = chol(k(X,X)+sigmaNoise^2*diag(length(X)))
L = t(L)
alpha = solve(t(L), solve(L,y))
fMean = t(kstar) %*% alpha
v = solve(L,kstar)
fVar = k(Xstar, Xstar)-t(v)%*%v
logMarginalLike = -0.5*(t(y)%*%alpha)-sum(diag(L))-length(y)/2*log(2*pi)
return (list(fmean=fMean, fvar=fVar, logLike=logMarginalLike))
}
plotGP = function(fmean,
fvar = NULL,
Xstar,
X,
y,
sigmaN = 0,
xlab = "time",
ylab = "temp") {
subheading = sprintf("%i samples  %i observed",
length(Xstar),
length(X))
legendPosition = "topright"
# IF VARIANCE GIVEN
if (!is.null(fvar)) {
upperConf = (fmean + sqrt(diag(fvar)) * 1.96)[, 1]
lowerConf = (fmean - sqrt(diag(fvar)) * 1.96)[, 1]
#Conf for y
legendText = c("data", "post mean", "95% intervals for f")
legendCols = c("green", "blue",  rgb(0, 0, 0, 0.3))
if (!sigmaN == 0) {
legendText = c("data",
"post mean",
"95% intervals for f",
"95% intervals for y")
legendCols = c("green", "blue",  rgb(0, 0, 0, 0.3), rgb(0, 0, 0.8, 0.3))
Y_upperConf = (fmean + sqrt(diag(fvar) + sigmaN ^ 2) * 1.96)[, 1]
Y_lowerConf = (fmean - sqrt(diag(fvar) + sigmaN ^ 2) * 1.96)[, 1]
}
plot(
x = Xstar,
y = fmean,
col = "blue",
type = "l",
ylim = c(min(lowerConf), max(upperConf)),
lwd = 2,
sub = subheading,
main = "GP",
ylab = ylab,
xlab = xlab
) +
points(x = X, y = y, col = "green")
legend(
legendPosition,
inset = 0.02,
legend = legendText,
col = legendCols,
pch = c('o', NA, NA, NA),
lty = c(NA, 1, 1, 1),
lwd = 2,
cex = 0.55
)
polygon(
x = c(rev(Xstar), Xstar),
y = c(rev(upperConf), lowerConf),
col = rgb(0, 0, 0, 0.3)
)
if (!sigmaN == 0) {
polygon(
x = c(rev(Xstar), Xstar),
y = c(rev(Y_upperConf), Y_lowerConf),
col = rgb(0, 0, 0.8, 0.3)
)
}
}
#IF NO VARIANCE GIVEN
else {
plot(
x = Xstar,
y = fmean,
col = "blue",
type = "l",
lwd = 2,
sub = subheading,
main = "GP",
ylab = ylab,
xlab = xlab
) +
points(x = X, y = y, col = "green")
legend(
legendPosition,
inset = 0.02,
legend = c("data", "post mean"),
col = c("green", "blue"),
pch = c('o', NA, NA, NA),
lty = c(NA, 1, 1, 1),
lwd = 2,
cex = 0.55
)
}
}
graphics.off()
par(mfrow=c(1,1))
X = c(-1.0, -0.6, -0.2, 0.4, 0.8)
y = c(0.768, -0.044, -0.940, 0.719, -0.664)
sigmaNoise = 0
Xstar = seq(-1,1,length=10)
gpParam = posteriorGP(X, y, Xstar, sigmaNoise, kernelMaker(sigmaF=1, l=0.3))
plotGP(gpParam$fmean, gpParam$fvar, Xstar, X, y)
graphics.off()
par(mfrow=c(1,1))
X = c(-1.0, -0.6, -0.2, 0.4, 0.8)
y = c(0.768, -0.044, -0.940, 0.719, -0.664)
sigmaNoise = 0
Xstar = seq(-1,1,length=10)
gpParam = posteriorGP(X, y, Xstar, sigmaNoise, kernelMaker(sigmaF=1, l=0.3))
plotGP(gpParam$fmean, gpParam$fvar, Xstar, X, y)
source('C:/Users/vicke/OneDrive - Linköpings universitet/advML/Tenta/Assignment3.R')
gpParam = posteriorGP(X, y, Xstar, sigmaNoise, kernelMaker(sigmaF=1, l=0.3))
plotGP(gpParam$fmean, gpParam$fvar, Xstar, X, y)
gpParam = posteriorGP(X, y, Xstar, sigmaNoise, kernelMaker(sigmaF=10, l=0.3))
plotGP(gpParam$fmean, gpParam$fvar, Xstar, X, y)
gpParam = posteriorGP(X, y, Xstar, sigmaNoise, kernelMaker(sigmaF=1, l=0.3))
plotGP(gpParam$fmean, gpParam$fvar, Xstar, X, y)
gpParam = posteriorGP(X, y, Xstar, 5, kernelMaker(sigmaF=1, l=0.3))
plotGP(gpParam$fmean, gpParam$fvar, Xstar, X, y)
gpParam = posteriorGP(X, y, Xstar, 4, kernelMaker(sigmaF=1, l=0.3))
plotGP(gpParam$fmean, gpParam$fvar, Xstar, X, y)
gpParam = posteriorGP(X, y, Xstar, 1, kernelMaker(sigmaF=1, l=0.3))
plotGP(gpParam$fmean, gpParam$fvar, Xstar, X, y)
gpParam = posteriorGP(X, y, Xstar, 0.1, kernelMaker(sigmaF=1, l=0.3))
plotGP(gpParam$fmean, gpParam$fvar, Xstar, X, y)
gpParam = posteriorGP(X, y, Xstar, 0, kernelMaker(sigmaF=1, l=0.3))
plotGP(gpParam$fmean, gpParam$fvar, Xstar, X, y)
gpParam = posteriorGP(X, y, Xstar, sigmaNoise, kernelMaker(sigmaF=1, l=0.3))
plotGP(gpParam$fmean, gpParam$fvar, Xstar, X, y)
gpParam$fvar
which(Xstar==0)
Xstar
Xstar = seq(-1,1,by=0.1)
which(Xstar==0)
Xstar
gpParam = posteriorGP(X, y, Xstar, sigmaNoise, kernelMaker(sigmaF=1, l=0.3))
plotGP(gpParam$fmean, gpParam$fvar, Xstar, X, y)
Xstar = seq(-1,1,by=0.01)
which(Xstar==0)
Xstar
gpParam = posteriorGP(X, y, Xstar, sigmaNoise, kernelMaker(sigmaF=1, l=0.3))
which(Xstar==0)
## The covariance from x=0 to all other xs is found in the variance for the corresponding column of
# x=0
gpParam$fvar[which(Xstar==0),]
## The covariance from x=0 to all other xs is found in the variance for the corresponding column of
# x=0
plot(x=Xstar, y=gpParam$fvar[which(Xstar==0),])
## The covariance from x=0 to all other xs is found in the variance for the corresponding column of
# x=0
plot(x=Xstar, y=gpParam$fvar[which(Xstar==0),], type="l", xlab="x", ylab="covariance", main="Covariance from x'=0 to x")
## The covariance from x=0 to all other xs is found in the variance for the corresponding column of
# x=0
plot(x=Xstar, y=gpParam$fvar[which(Xstar==0),], type="l", xlab="x", ylab="covariance", main="Covariance from x'=0 to x", col="blue", lwd=2)
plotGP(gpParam$fmean, gpParam$fvar, Xstar, X, y)
## The covariance from x=0 to all other xs is found in the variance for the corresponding column of
# x=0
plot(x=Xstar, y=gpParam$fvar[which(Xstar==0),], type="l", xlab="x", ylab="covariance", main="Covariance from x'=0 to x", col="blue", lwd=2)
gpParam = posteriorGP(X, y, Xstar, sigmaNoise, kernelMaker(sigmaF=1, l=0.3))
plotGP(gpParam$fmean, gpParam$fvar, Xstar, X, y)
## The covariance from x=0 to all other xs is found in the variance for the corresponding column of
# x=0
plot(x=Xstar, y=gpParam$fvar[which(Xstar==0),], type="l", xlab="x", ylab="covariance", main="Covariance from x'=0 to x", col="blue", lwd=2)
# (2)
plot(x=Xstar, y=diag$fvar)
diag$fvar
# (2)
plot(x=Xstar, y=diag(gpParam$fvar))
# (2)
plot(x=X, y=diag(gpParam$fvar[which(Xstar=X)]))
# (2)
plot(x=X, y=gpParam$fvar[which(Xstar=X)])
which(Xstar==X)
## The covariance from x=0 to all other xs is found in the variance for the corresponding column of
# x=0
plot(x=Xstar, y=gpParam$fvar[which(Xstar==0),], type="l", xlab="x", ylab="covariance", main="Covariance from x'=0 to x", col="blue", lwd=2)
plot(x=X, y=y)
## The covariance from x=0 to all other xs is found in the variance for the corresponding column of
# x=0
plot(x=Xstar, y=gpParam$fvar[which(Xstar==0),], type="l", xlab="x", ylab="covariance", main="Covariance from x'=0 to x", col="blue", lwd=2)
points(x=X, y=y)
points(x=X, y=y, col="green")
points(x=X, y=y, col="green", lwd=3)
# (2)
plot(x=Xstar, y=gpParam$fvar[which(Xstar==0),], ylim=c(min(y),max(y)). type="l", xlab="x", ylab="covariance", main="Covariance from x'=0 to x", col="blue", lwd=2)
# (2)
plot(x=Xstar, y=gpParam$fvar[which(Xstar==0),], ylim=c(min(y),max(y)),
type="l", xlab="x", ylab="covariance", main="Covariance from x'=0 to x", col="blue", lwd=2)
points(x=X, y=y, col="green", lwd=3)
plot(x=X, y=gpParam$fvar[which(abs(Xstar-x)>0.01),], ylim=c(min(y),max(y)),
type="l", xlab="x", ylab="covariance", main="Covariance from x'=0 to x", col="blue", lwd=2)
which(abs(Xstar-x)>0.01)
which(abs(Xstar-X)>0.01)
plot(x=X, y=gpParam$fvar[which(abs(Xstar-X)>0.01),], ylim=c(min(y),max(y)),
type="l", xlab="x", ylab="covariance", main="Covariance from x'=0 to x", col="blue", lwd=2)
which(abs(Xstar-X)>0.01)
# (2)
plot(x=Xstar, y=gpParam$fvar[which(Xstar==0),], ylim=c(min(y),max(y)),
type="l", xlab="x", ylab="covariance", main="Covariance from x'=0 to x", col="blue", lwd=2)
points(x=X, y=y, col="green", lwd=3)
gpParam = posteriorGP(X, y, Xstar, sigmaNoise, kernelMaker(sigmaF=1, l=0.3))
plotGP(gpParam$fmean, gpParam$fvar, Xstar, X, y)
# (4)
varPrior = kernelMakes(sigmaF=1, l=0.3)(Xstar, Xstar)
# (4)
varPrior = kernelMaker(sigmaF=1, l=0.3)(Xstar, Xstar)
plot(x=Xstar, y=varPrior[which(Xstar==0)])
plot(varPrior[which(Xstar==0)])
plot(x=Xstar, y=varPrior)
# (4) the prior for the covariance of x and x' is given by the exponential kernel
varPrior = kernelMaker(sigmaF=1, l=0.3)(Xstar, 0)
plot(x=Xstar, y=varPrior)
# (4) the prior for the covariance of x and x' is given by the exponential kernel
varPrior = kernelMaker(sigmaF=1, l=0.3)(Xstar, 0)
plot(x=Xstar, y=varPrior, xlab="x", ylab="covariance", main="Prior Covariance from x'=0 to x", col="blue", lwd=2)
plot(x=Xstar, y=varPrior, xlab="x", ylab="covariance", type="l", main="Prior Covariance from x'=0 to x", col="blue", lwd=2)
kernelMaker = function(sigmaF=1,l=0.3){
expKernel <- function(x1,x2){
n1 <- length(x1)
n2 <- length(x2)
K <- matrix(NA,n1,n2)
for (i in 1:n2){
K[,i] <- sigmaF^2*exp(- 0.5*( (x1-x2[i])/l )^2 )
}
return(K)
}
return(expKernel)
}
plotGP = function(fmean,
fvar = NULL,
Xstar,
X,
y,
sigmaN = 0,
xlab = "time",
ylab = "temp") {
subheading = sprintf("%i samples  %i observed",
length(Xstar),
length(X))
legendPosition = "topright"
# IF VARIANCE GIVEN
if (!is.null(fvar)) {
upperConf = (fmean + sqrt(diag(fvar)) * 1.96)[, 1]
lowerConf = (fmean - sqrt(diag(fvar)) * 1.96)[, 1]
#Conf for y
legendText = c("data", "post mean", "95% intervals for f")
legendCols = c("green", "blue",  rgb(0, 0, 0, 0.3))
if (!sigmaN == 0) {
legendText = c("data",
"post mean",
"95% intervals for f",
"95% intervals for y")
legendCols = c("green", "blue",  rgb(0, 0, 0, 0.3), rgb(0, 0, 0.8, 0.3))
Y_upperConf = (fmean + sqrt(diag(fvar) + sigmaN ^ 2) * 1.96)[, 1]
Y_lowerConf = (fmean - sqrt(diag(fvar) + sigmaN ^ 2) * 1.96)[, 1]
}
plot(
x = Xstar,
y = fmean,
col = "blue",
type = "l",
ylim = c(min(lowerConf), max(upperConf)),
lwd = 2,
sub = subheading,
main = "GP",
ylab = ylab,
xlab = xlab
) +
points(x = X, y = y, col = "green")
legend(
legendPosition,
inset = 0.02,
legend = legendText,
col = legendCols,
pch = c('o', NA, NA, NA),
lty = c(NA, 1, 1, 1),
lwd = 2,
cex = 0.55
)
polygon(
x = c(rev(Xstar), Xstar),
y = c(rev(upperConf), lowerConf),
col = rgb(0, 0, 0, 0.3)
)
if (!sigmaN == 0) {
polygon(
x = c(rev(Xstar), Xstar),
y = c(rev(Y_upperConf), Y_lowerConf),
col = rgb(0, 0, 0.8, 0.3)
)
}
}
#IF NO VARIANCE GIVEN
else {
plot(
x = Xstar,
y = fmean,
col = "blue",
type = "l",
lwd = 2,
sub = subheading,
main = "GP",
ylab = ylab,
xlab = xlab
) +
points(x = X, y = y, col = "green")
legend(
legendPosition,
inset = 0.02,
legend = c("data", "post mean"),
col = c("green", "blue"),
pch = c('o', NA, NA, NA),
lty = c(NA, 1, 1, 1),
lwd = 2,
cex = 0.55
)
}
}
posteriorGP = function (X, y, Xstar, sigmaNoise, k){
kstar = k(X,Xstar)
L = chol(k(X,X)+sigmaNoise^2*diag(length(X)))
L = t(L)
alpha = solve(t(L), solve(L,y))
fMean = t(kstar) %*% alpha
v = solve(L,kstar)
fVar = k(Xstar, Xstar)-t(v)%*%v
logMarginalLike = -0.5*(t(y)%*%alpha)-sum(diag(L))-length(y)/2*log(2*pi)
return (list(fmean=fMean, fvar=fVar, logLike=logMarginalLike))
}
graphics.off()
par(mfrow=c(1,1))
X = c(-1.0, -0.6, -0.2, 0.4, 0.8)
y = c(0.768, -0.044, -0.940, 0.719, -0.664)
sigmaNoise = 0
Xstar = seq(-1,1,by=0.01)
gpParam = posteriorGP(X, y, Xstar, sigmaNoise, kernelMaker(sigmaF=1, l=0.3))
plotGP(gpParam$fmean, gpParam$fvar, Xstar, X, y)
# (1)
## The covariance from x=0 to all other xs is found in the variance for the corresponding column of
# x=0
plot(x=Xstar, y=gpParam$fvar[which(Xstar==0),], type="l", xlab="x", ylab="covariance", main="Covariance from x'=0 to x", col="blue", lwd=2)
# as we can see, maximum covariance is found around 0, but slightly shifted.
# this is because the points in the data influences the covariance by making x values with similiar y values more correlated
# for instance, the training point at 0.8 is ~ 0.3 away from the training point at -0.2 in y value. This means that the
# corresponding x values for theese points are slightly correlated, explainging the curvature upwards towards x=1 in the covariance plot
# (2)
plot(x=Xstar, y=gpParam$fvar[which(Xstar==0),], ylim=c(min(y),max(y)),
type="l", xlab="x", ylab="covariance", main="Posterior Covariance from x'=0 to x", col="blue", lwd=2)
points(x=X, y=y, col="green", lwd=3)
# (4) the prior for the covariance of x and x' is given by the exponential kernel
varPrior = kernelMaker(sigmaF=1, l=0.3)(Xstar, 0)
plot(x=Xstar, y=varPrior, xlab="x", ylab="covariance", type="l", main="Prior Covariance from x'=0 to x", col="blue", lwd=2)
posteriorGP = function (X, y, Xstar, sigmaNoise, k){
kstar = k(X,Xstar)
L = chol(k(X,X)+sigmaNoise^2*diag(length(X)))
L = t(L)
alpha = solve(t(L), solve(L,y))
fMean = t(kstar) %*% alpha
v = solve(L,kstar)
fVar = k(Xstar, Xstar)-t(v)%*%v
logMarginalLike = -0.5*(t(y)%*%alpha)-sum(diag(L))-length(y)/2*log(2*pi)
return (list(fmean=fMean, fvar=fVar, logLike=logMarginalLike))
}
source('C:/Users/vicke/OneDrive - Linköpings universitet/advML/Tenta/Assignment3-2.R')
source('C:/Users/vicke/OneDrive - Linköpings universitet/advML/Tenta/Assignment3-2.R')
source('C:/Users/vicke/OneDrive - Linköpings universitet/advML/Tenta/Assignment3-2.R')
source('C:/Users/vicke/OneDrive - Linköpings universitet/advML/Tenta/Assignment3-2.R')
source('C:/Users/vicke/OneDrive - Linköpings universitet/advML/Tenta/Assignment3-2.R')
source('C:/Users/vicke/OneDrive - Linköpings universitet/advML/Tenta/Assignment3-2.R')
source('C:/Users/vicke/OneDrive - Linköpings universitet/advML/Tenta/Assignment3-2.R')
source('C:/Users/vicke/OneDrive - Linköpings universitet/advML/Tenta/Assignment3-2.R')
posterior = posteriorGP(small.data$time, small.data$temp, 1, k)
plotGP(fstar, fvar, small.data$time, small.data$time, small.data$temp, k=k, sigmaN = best_sigma)
k = kernelWrap(sigmaF = 20, l = 0.2)
posterior = posteriorGP(small.data$time, small.data$temp, 1, k)
posterior = posteriorGP(small.data$time, small.data$temp,small.data$time, 1, k)
plotGP(fstar, fvar, small.data$time, small.data$time, small.data$temp, k=k, sigmaN = best_sigma)
plotGP(posterior$fmean, posterior$fvar, small.data$time, small.data$time, small.data$temp, k=k, sigmaN = best_sigma)
plotGP(posterior$fmean, posterior$fvar, small.data$time, small.data$time, small.data$temp, k=k, sigmaN = 1)
plotGP(posterior$fmean, posterior$fvar, small.data$time, small.data$time, small.data$temp)
posterior$logLike
exp((fmean, fvar, Xstar, X, y))
exp(posterior$loglike)
posterior$loglike
exp(posterior$logLike)
posterior$logLike
source('C:/Users/vicke/OneDrive - Linköpings universitet/advML/Tenta/Assignment3-2.R')
source('C:/Users/vicke/OneDrive - Linköpings universitet/advML/Tenta/Assignment3-2.R')
source('C:/Users/vicke/OneDrive - Linköpings universitet/advML/Tenta/Assignment3-2.R')
source('C:/Users/vicke/OneDrive - Linköpings universitet/advML/Tenta/Assignment3-2.R')
source('C:/Users/vicke/OneDrive - Linköpings universitet/advML/Tenta/Assignment2.R')
plot(MovingAverage(test.rewards,100),type = "l", xlab="Episode", ylab="Reward", main= "Regular Q-Learning")
plot(MovingAverage(test.alt_rewards,100),type = "l", xlab="Episode", ylab="Reward", main="Alternative Q-Learning")
mean(test.rewards)
mean(test.alt_rewards)
mean(test.rewards)
mean(test.alt_rewards)
