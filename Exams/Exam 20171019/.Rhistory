help("sample")
source('C:/Users/vicke/OneDrive - Linköpings universitet/advML/lab3/RL_Lab1.R')
source('C:/Users/vicke/OneDrive - Linköpings universitet/advML/lab3/RL_Lab1.R')
source('C:/Users/vicke/OneDrive - Linköpings universitet/advML/lab3/RL_Lab1.R')
source('C:/Users/vicke/OneDrive - Linköpings universitet/advML/lab3/RL_Lab1.R')
source('C:/Users/vicke/OneDrive - Linköpings universitet/advML/lab3/RL_Lab1.R')
source('C:/Users/vicke/OneDrive - Linköpings universitet/advML/lab3/RL_Lab1.R')
setwd("C:/Users/vicke/OneDrive - Linköpings universitet/advML/Exam191017")
install.packages(c("bnlearn", "gRain"))
install.packages(c("bnlearn", "gRain"))
help(hc)
library("bnlearn")
help(hc)
library("bnlearn")
data("asia")
lel = hc(asia,score="aic")
plot(lel)
plot(cpdag(lel))
help(cpdag)
set.seed(12345)
network1 = cpdag(hc(asia, score ="aic"))
network2 = cpdag(hc(asia, score ="bde"))
plot(network1, main="AIC Network")
plot(network2, main="BDeu Network")
plot(network1, main="AIC Network")
plot(network2, main="BDeu Network")
print(all.equal(network1,network2))
v
all.equal(network1,network2)
help(pc.stable)
help(cextend)
help(bnfit)
help(bn.fit)
graphStructure = pc.stable(trainData)
getFittedBN = function(trainData){
graphStructure = pc.stable(trainData)
fittedBN = bn.fit(cextend(graphStructure), trainData)
return(fittedBN)
}
## Question 2
if (!require(gRain)) {
source("https://bioconductor.org/biocLite.R")
biocLite("RBGL")
}
library(gRain)
## Question 2
if (!require(gRain)) {
source("https://bioconductor.org/biocLite.R")
biocLite("RBGL")
}
graphStructure = pc.stable(asia)
plot(graphStructure)
plot(cextend(graphStructure))
plot((graphStructure))
plot(cextend(graphStructure))
graphStructure = model2network("[A][S][T|A][L|S][B|S][D|B:E][E|T:L][X|E]")
plot(graphStructure)
plot(cextend(graphStructure))
fittedBN = bn.fit((graphStructure), asia)
plot(fittedBN)
?'bn.fit plots'
bn.fit.qqplot(fittedBN)
bn.fit.histogram(fittedBN)
bn.fit.xyplot(fittedBN)
flush.console()
flush.console()
flush.console()
help(flush.console)
help(lines)
help("plot")
