setwd("O:\advML\Exam 241018")
\
/
setwd("O:/advML/Exam 241018")
setwd("O:/advML/Exam 241018")
source('O:/advML/Exam 241018/Assignment1.R')
library(HMM)
set.seed(567)
data("asia")
data(asia)
source('O:/advML/Exam 241018/Assignment1.R')
library(HMM)
set.seed(567)
data("asia")
asia()
source('O:/advML/Exam 241018/Assignment1.R')
source('O:/advML/Exam 241018/Assignment1.R')
data("asia")
library(bnlearn)
set.seed(567)
data("asia")
source('O:/advML/Exam 241018/Assignment1.R')
source('O:/advML/Exam 241018/Assignment1.R')
library(gRain)
source('O:/advML/Exam 241018/Assignment1.R')
transProbs=t(matrix(c(0.5,0.5,0,0,0,0,0,0,0,0,
0,0.5,0.5,0,0,0,0,0,0,0,
0,0,0.5,0.5,0,0,0,0,0,0,
0,0,0,0.5,0.5,0,0,0,0,0,
0,0,0,0,0.5,0.5,0,0,0,0,
0,0,0,0,0,0.5,0.5,0,0,0,
0,0,0,0,0,0,0.5,0.5,0,0,
0,0,0,0,0,0,0,0.5,0.5,0,
0,0,0,0,0,0,0,0,0.5,0.5,
0.5,0,0,0,0,0,0,0,0,0.5),nrow=10,ncol=10))
emissionProbs = t(matrix(c(0.2,0.2,0.2,0,0,0,0,0,0.2,0.2,
0.2,0.2,0.2,0.2,0,0,0,0,0,0.2,
0.2,0.2,0.2,0.2,0.2,0,0,0,0,0,
0,0.2,0.2,0.2,0.2,0.2,0,0,0,0,
0,0,0.2,0.2,0.2,0.2,0.2,0,0,0,
0,0,0,0.2,0.2,0.2,0.2,0.2,0,0,
0,0,0,0,0.2,0.2,0.2,0.2,0.2,0,
0,0,0,0,0,0.2,0.2,0.2,0.2,0.2,
0.2,0,0,0,0,0,0.2,0.2,0.2,0.2,
0.2,0.2,0,0,0,0,0,0.2,0.2,0.2),nrow=10, ncol=10))
#a(zt) = p(x0:t, zt) = p(xt|zt)Sum(a(zt-1)*p(zt|zt-1))
# a(z0) = p(x0, z0) = p(z0|x0)*p(x0)
# x: emissions z:hidden state
emissionProbs
initial_state_prob = sample(1:nrow(transProbs)))
initial_state_prob = sample(1:nrow(transProbs))
initial_state_prob = sample(1,1:nrow(transProbs))
intial-state_prob
intial_state_prob
initial_state_prob
initial_state_prob = sample(1,1:nrow(transProbs))
initial_state_prob
help(sample)
initial_state_prob = sample(1:nrow(transProbs),1)
help(sample)
help(sample)
initial_state_prob
initial_state_prob = sample(1:nrow(transProbs),1)
initial_state_prob
help("forward")
transProbs=t(matrix(c(0.5,0.5,0,0,0,0,0,0,0,0,
0,0.5,0.5,0,0,0,0,0,0,0,
0,0,0.5,0.5,0,0,0,0,0,0,
0,0,0,0.5,0.5,0,0,0,0,0,
0,0,0,0,0.5,0.5,0,0,0,0,
0,0,0,0,0,0.5,0.5,0,0,0,
0,0,0,0,0,0,0.5,0.5,0,0,
0,0,0,0,0,0,0,0.5,0.5,0,
0,0,0,0,0,0,0,0,0.5,0.5,
0.5,0,0,0,0,0,0,0,0,0.5),nrow=10,ncol=10))
emissionProbs = t(matrix(c(0.2,0.2,0.2,0,0,0,0,0,0.2,0.2,
0.2,0.2,0.2,0.2,0,0,0,0,0,0.2,
0.2,0.2,0.2,0.2,0.2,0,0,0,0,0,
0,0.2,0.2,0.2,0.2,0.2,0,0,0,0,
0,0,0.2,0.2,0.2,0.2,0.2,0,0,0,
0,0,0,0.2,0.2,0.2,0.2,0.2,0,0,
0,0,0,0,0.2,0.2,0.2,0.2,0.2,0,
0,0,0,0,0,0.2,0.2,0.2,0.2,0.2,
0.2,0,0,0,0,0,0.2,0.2,0.2,0.2,
0.2,0.2,0,0,0,0,0,0.2,0.2,0.2),nrow=10, ncol=10))
# Get observations
ringStates = seq(1,10,1)
sensorStates = seq(1,10,1)
model = initHMM(States=ringStates, Symbols = sensorStates, transProbs= transProbs, emissionProbs = emissionProbs)
help(sweep)
obs
sensorStates = seq(1,10,1)
model = initHMM(States=ringStates, Symbols = sensorStates, transProbs= transProbs, emissionProbs = emissionProbs)
nSims = 20
sims = simHMM(model, nSims)
obs = sims$observation
obs
initial_state_prob = 1/nrow(transProbs)
alpha_zero = initial_state_prob*emissionProbs[,obs[1]]
alpha_zero
alphas[,1] = alpha_zero
# Uniform distrubution over first state
# make matrix with rows: states, columns: time
alphas = matrix(0, nrow(transProbs), length(obs))
initial_state_prob = 1/nrow(transProbs)
alpha_zero = initial_state_prob*emissionProbs[,obs[1]]
alphas[,1] = alpha_zero
alphas
source('O:/advML/Exam 241018/Assignment2.R')
source('O:/advML/Exam 241018/Assignment2.R')
i
j
source('O:/advML/Exam 241018/Assignment2.R')
alphas
source('O:/advML/Exam 241018/Assignment2.R')
log_alphas
source('O:/advML/Exam 241018/Assignment2.R')
source('O:/advML/Exam 241018/Assignment2.R')
source('O:/advML/Exam 241018/Assignment2.R')
real_alphas = exp(forward(model,obs))
real_alphas
alphas
alphas-real_alphas
source('O:/advML/Exam 241018/Assignment2.R')
alphas
source('O:/advML/Exam 241018/Assignment2.R')
source('O:/advML/Exam 241018/Assignment2.R')
source('O:/advML/Exam 241018/Assignment2.R')
source('O:/advML/Exam 241018/Assignment2.R')
obs[i]
emissionProbs[,obs[2]]
obs[2]
emissionProbs[,obs[2]]
emissionProbs
source('O:/advML/Exam 241018/Assignment2.R')
alphas
real_alphas
summedPrevTransitions
source('O:/advML/Exam 241018/Assignment2.R')
source('O:/advML/Exam 241018/Assignment2.R')
source('O:/advML/Exam 241018/Assignment2.R')
alphas
real_alphas
real_alphas - alphas
alphas
real_alphas
apply(abs(real_alphas-alphas),2,sum)
probs.filtered = sweep(alphas, 2, apply(alphas,2,sum), '/')
real_probs.filtered = sweep(real_alphas, 2, apply(real_alphas,2,sum), '/')
probs.filtered
real_probs.filtered
probs.filtered- real_probs.filtered
source('O:/advML/Exam 241018/Assignment4.R')
source('O:/advML/Exam 241018/Assignment4.R')
source('O:/advML/Exam 241018/Assignment4.R')
plot(x=zGrid, y=k0z, type="l", lwd=2)
plot(x=zGrid, y=k0z, type="l", lwd=2, color="green")
plot(x=zGrid, y=k0z, type="l", lwd=2, col="green", main = "K(0,z)")
plot(x=zGrid, y=k0z, type="l", lwd=2, col="blue", main = "K(0,z)")
sigmaF_list = list(1, sqrt(5))
graphics.off()
mfrow(par=c(2,1))
for(sigmaF in sigmaF_list){
l = 0.5
kernel = kernelWrapper(sigmaF, l)
zGrid = seq(0.01, 1, by=0.01)
k0z = kernel(0, zGrid)
plot(x=zGrid, y=k0z, type="l", lwd=2, col="blue", main = "K(0,z)")
}
mfrow(par=c(2,1))
par(mfrow=c(2,1))
for(sigmaF in sigmaF_list){
l = 0.5
kernel = kernelWrapper(sigmaF, l)
zGrid = seq(0.01, 1, by=0.01)
k0z = kernel(0, zGrid)
plot(x=zGrid, y=k0z, type="l", lwd=2, col="blue", main = "K(0,z)")
}
sigmaF_list = list(1, sqrt(5))
graphics.off()
par(mfrow=c(1,2))
for(sigmaF in sigmaF_list){
l = 0.5
kernel = kernelWrapper(sigmaF, l)
zGrid = seq(0.01, 1, by=0.01)
k0z = kernel(0, zGrid)
plot(x=zGrid, y=k0z, type="l", lwd=2, col="blue", main = "K(0,z)")
}
load("lidar.RData")
structure = model2network("[C][D][M|D,C]")
structure = model2network("[C][D][M|D:C]")
plot(structure)
library(bnlearn)
help(custom.fit)
cptA = matrix(c(0.4, 0.6), ncol = 2, dimnames = list(NULL, c("LOW", "HIGH")))
cptA
par.C = matrix(c(1, 1, 1)/3, ncol = 3, dimnames = list(NULL, c("DOOR1", "DOOR2", "DOOR3")))
par.C
par.C = matrix(c(1, 1, 1)/3, ncol = 3, dimnames = list(NULL, c("CAR_BEHIND_DOOR1", "CAR_BEHIND_DOOR2", "CAR_BEHIND_DOOR3")))
par.D = matrix(c(1, 1, 1)/3, ncol = 3, dimnames = list(NULL, c("CHOOSE_DOOR1", "CHOOSE_DOOR2", "CHOOSE_DOOR3")))
par.D
M = c(0.5, 0.5, 0.4, 0.6, 0.3, 0.7, 0.2, 0.8)
dim(cptC) = c(2, 2, 2)
dimnames(cptC) = list("M" = mStates, "C" =  cStates,
"D" = dStates)
source('O:/advML/Exam 231019/Assignment1.R')
par.M = c(0.5, 0.5, 0.4, 0.6, 0.3, 0.7, 0.2, 0.8)
dim(par.M) = c(2, 2, 2)
dimnames(par.M) = list("M" = mStates, "C" =  cStates,
"D" = dStates)
source('O:/advML/Exam 231019/Assignment1.R')
par.M
par.M = c(0.5, 0.5, 0.4, 0.6, 0.3, 0.7, 0.2, 0.8, 0.3, 0.7, 0.2, 0.8)
dim(par.M) = c(3, 2, 2)
par.M
dim(par.M) = c(2, 2, 3)
par.M
dimnames(par.M) = list("M" = mStates, "C" =  cStates,
"D" = dStates)
par.M = c(0.5, 0.5, 0.4, 0.6, 0.3, 0.7, 0.2, 0.8, 0.3, 0.7, 0.2, 0.8)
dim(par.M) = c(2, 2, 3)
par.M
dimnames(par.M) = list("M" = mStates, "C" =  cStates,
"D" = dStates)
par.M = c(0.5, 0.5, 0.5, 0.4, 0.4, 0.4, 0.3, 0.3, 0.3, 0.9, 0.9, 0.9, 0.8, 0.8, 0.8, 0.7, 0.7, 0.7, 0.6, 0.6, 0.6, 0.5, 0.5, 0.5, 0.4, 0.4, 0.4)
dim(par.M) = c(3, 3, 3)
par.M
dimnames(par.M) = list("M" = mStates, "C" =  cStates,
"D" = dStates)
par.M
dimnames(par.M) = list("C" =  cStates,
"D" = dStates,"M" = mStates)
par.M
par.M = c(0, 0, 0, 1, 0.4, 0.4, 0.3, 0.3, 0.3,
0.9, 0.9, 0.9, 0.8, 0.8, 0.8, 0.7, 0.7, 0.7,
0.6, 0.6, 0.6, 0.5, 0.5, 0.5, 0.4, 0.4, 0.4)
dim(par.M) = c(3, 3, 3)
par.M
dimnames(par.M) = list("C" =  cStates,
"D" = dStates,"M" = mStates)
fitted_bn = custom.fit(structure, dist = list(M = par.M, D = par.D, C = par.C))
par.M = c(0, 0, 0, 1, 0.4, 0.4, 0.3, 0.3, 0.3,
0.9, 0.9, 0.9, 0.8, 0.8, 0.8, 0.7, 0.7, 0.7,
0.6, 0.6, 0.6, 0.5, 0.5, 0.5, 0.4, 0.4, 0.4)
dim(par.M) = c(3, 3, 3)
dimnames(par.M) = list("C" =  cStates,
"D" = dStates,"M" = mStates)
par.M
par.M = c(0, 0, 0, 0, 0.5, 1, 0, 1, 0,
0.9, 0.9, 0.9, 0.8, 0.8, 0.8, 0.7, 0.7, 0.7,
0.6, 0.6, 0.6, 0.5, 0.5, 0.5, 0.4, 0.4, 0.4)
dim(par.M) = c(3, 3, 3)
par.M
dimnames(par.M) = list("C" =  cStates,
"D" = dStates,"M" = mStates)
par.M
