source('C:/Users/vicke/OneDrive/Dokument/TDDE01 Labb/TDDE01 labb/assignment4.R')
source('C:/Users/vicke/OneDrive/Dokument/TDDE01 Labb/TDDE01 labb/assignment4.R')
source('C:/Users/vicke/OneDrive/Dokument/TDDE01 Labb/TDDE01 labb/assignment4.R')
source('C:/Users/vicke/OneDrive/Dokument/TDDE01 Labb/TDDE01 labb/assignment4.R')
View(data)
View(data)
source('C:/Users/vicke/OneDrive/Dokument/TDDE01 Labb/TDDE01 labb/assignment4.R')
source('C:/Users/vicke/OneDrive/Dokument/TDDE01 Labb/TDDE01 labb/assignment4.R')
X = train[sprintf("Channel%d",seq(1,100,1))]
source('C:/Users/vicke/OneDrive/Dokument/TDDE01 Labb/TDDE01 labb/assignment4.R')
source('C:/Users/vicke/OneDrive/Dokument/TDDE01 Labb/TDDE01 labb/assignment4.R')
source('C:/Users/vicke/OneDrive/Dokument/TDDE01 Labb/TDDE01 labb/assignment4.R')
source('C:/Users/vicke/OneDrive/Dokument/TDDE01 Labb/TDDE01 labb/assignment4.R')
source('C:/Users/vicke/OneDrive/Dokument/TDDE01 Labb/TDDE01 labb/assignment4.R')
source('C:/Users/vicke/OneDrive/Dokument/TDDE01 Labb/TDDE01 labb/assignment4.R')
source('C:/Users/vicke/OneDrive/Dokument/TDDE01 Labb/TDDE01 labb/assignment4.R')
source('C:/Users/vicke/OneDrive/Dokument/TDDE01 Labb/TDDE01 labb/assignment4.R')
typeof(Y)
Y = train[,Fat]
Y = train[,"Fat"]
typeof(Y)
source('C:/Users/vicke/OneDrive/Dokument/TDDE01 Labb/TDDE01 labb/assignment4.R')
source('C:/Users/vicke/OneDrive/Dokument/TDDE01 Labb/TDDE01 labb/assignment4.R')
View(X)
typeof(Y)
View(data)
View(data)
View(data)
Y =train[,103]
Y
typeof(Y)
Y = as.vector(train[,103])
typeof(Y)
source('C:/Users/vicke/OneDrive/Dokument/TDDE01 Labb/TDDE01 labb/assignment4.R')
source('C:/Users/vicke/OneDrive/Dokument/TDDE01 Labb/TDDE01 labb/assignment4.R')
typeof(Y)
View(data)
source('C:/Users/vicke/OneDrive/Dokument/TDDE01 Labb/TDDE01 labb/assignment4.R')
X = train[,1:100]
typeof(X)
Y = train$Fat
typeof(Y)
View(data)
source('C:/Users/vicke/OneDrive/Dokument/TDDE01 Labb/TDDE01 labb/assignment4.R')
Y
View(train)
X = train[,1:100]
Y = train[,102]
source('C:/Users/vicke/OneDrive/Dokument/TDDE01 Labb/TDDE01 labb/assignment4.R')
X <- model.matrix(. -Fat -Protein - Moisture, data=train)
source('C:/Users/vicke/OneDrive/Dokument/TDDE01 Labb/TDDE01 labb/assignment4.R')
source('C:/Users/vicke/OneDrive/Dokument/TDDE01 Labb/TDDE01 labb/assignment4.R')
source('C:/Users/vicke/OneDrive/Dokument/TDDE01 Labb/TDDE01 labb/assignment4.R')
X = as.matrix(train[,1:100])
typeof(X)
#ridge regression
model = glmnet(Fat~ . -Protein - Moisture,data=train,family="gaussian")
source('C:/Users/vicke/OneDrive/Dokument/TDDE01 Labb/TDDE01 labb/assignment4.R')
#ridge regression
model = glmnet(Fat~ . -Protein - Moisture,data=train,family="gaussian")
source('C:/Users/vicke/OneDrive/Dokument/TDDE01 Labb/TDDE01 labb/assignment4.R')
#ridge regression
model = cv.glmnet(Fat~ . -Protein - Moisture,data=train,family="gaussian")
source('C:/Users/vicke/OneDrive/Dokument/TDDE01 Labb/TDDE01 labb/assignment4.R')
#ridge regression
model = glmnet(Fat~ . -Protein - Moisture,data=train,family="gaussian")
source('C:/Users/vicke/OneDrive/Dokument/TDDE01 Labb/TDDE01 labb/assignment4.R')
source('C:/Users/vicke/OneDrive/Dokument/TDDE01 Labb/TDDE01 labb/assignment4.R')
source('C:/Users/vicke/OneDrive/Dokument/TDDE01 Labb/TDDE01 labb/assignment4.R')
View(X)
source('C:/Users/vicke/OneDrive/Dokument/TDDE01 Labb/TDDE01 labb/assignment4.R')
X = as.matrix(Fat~ . -Protein - Moisture,data=train)
source('C:/Users/vicke/OneDrive/Dokument/TDDE01 Labb/TDDE01 labb/assignment4.R')
source('C:/Users/vicke/OneDrive/Dokument/TDDE01 Labb/TDDE01 labb/assignment4.R')
plot(model)
source('C:/Users/vicke/OneDrive/Dokument/TDDE01 Labb/TDDE01 labb/assignment4.R')
plot(model,xvar="lambda")
source('C:/Users/vicke/OneDrive/Dokument/TDDE01 Labb/TDDE01 labb/assignment4.R')
#ridge regression
model = glmnet(x=X,y=Y,alpha=1,family="gaussian")
source('C:/Users/vicke/OneDrive/Dokument/TDDE01 Labb/TDDE01 labb/assignment4.R')
plot(model)
source('C:/Users/vicke/OneDrive/Dokument/TDDE01 Labb/TDDE01 labb/assignment4.R', echo=TRUE)
source('C:/Users/vicke/OneDrive/Dokument/TDDE01 Labb/TDDE01 labb/assignment4.R', echo=TRUE)
source('C:/Users/vicke/OneDrive/Dokument/TDDE01 Labb/TDDE01 labb/assignment4.R')
plot(model,xvar="lambda")
source('C:/Users/vicke/OneDrive/Dokument/TDDE01 Labb/TDDE01 labb/assignment4.R')
source('C:/Users/vicke/OneDrive/Dokument/TDDE01 Labb/TDDE01 labb/assignment4.R')
source('C:/Users/vicke/OneDrive/Dokument/TDDE01 Labb/TDDE01 labb/assignment4.R')
source('C:/Users/vicke/OneDrive/Dokument/TDDE01 Labb/TDDE01 labb/assignment4.R')
source('C:/Users/vicke/OneDrive/Dokument/TDDE01 Labb/TDDE01 labb/assignment4.R', echo=TRUE)
source('C:/Users/vicke/OneDrive/Dokument/TDDE01 Labb/TDDE01 labb/assignment4.R')
plot(model,xvar="lambda")
plot(model,xvar="lambda")
set.seed(12345)
h1 <- qplot(data$Length,xlab="Length",ylab="Ammount", col="observed Vals")
newVals = getLength(runif(50, 0, 1),theta1)
source('C:/Users/vicke/OneDrive/Dokument/TDDE01 Labb/TDDE01 labb/assignment2.R')
source('C:/Users/vicke/OneDrive/Dokument/TDDE01 Labb/TDDE01 labb/assignment2.R')
h1
source('C:/Users/vicke/OneDrive/Dokument/TDDE01 Labb/TDDE01 labb/assignment2.R')
source('C:/Users/vicke/OneDrive/Dokument/TDDE01 Labb/TDDE01 labb/assignment2.R')
source('C:/Users/vicke/OneDrive/Dokument/TDDE01 Labb/TDDE01 labb/assignment2.R')
source('C:/Users/vicke/OneDrive/Dokument/TDDE01 Labb/TDDE01 labb/assignment2.R')
h2
source('C:/Users/vicke/OneDrive/Dokument/TDDE01 Labb/TDDE01 labb/assignment2.R')
source('C:/Users/vicke/OneDrive/Dokument/TDDE01 Labb/TDDE01 labb/assignment2.R')
h1
h1
help("hist")
source('C:/Users/vicke/OneDrive/Dokument/TDDE01 Labb/TDDE01 labb/assignment2.R')
source('C:/Users/vicke/OneDrive/Dokument/TDDE01 Labb/TDDE01 labb/assignment2.R')
h1
h1
h1
source('C:/Users/vicke/OneDrive/Dokument/TDDE01 Labb/TDDE01 labb/assignment4.R')
modelAIC$anova
modelAIC$anova
source('C:/Users/vicke/OneDrive/Dokument/TDDE01 Labb/TDDE01 labb/assignment4.R')
View(data)
source('C:/Users/vicke/OneDrive/Dokument/TDDE01 Labb/TDDE01 labb/assignment4.R', echo=TRUE)
View(data)
View(data)
View(data)
View(data)
View(data)
source('C:/Users/vicke/OneDrive/Dokument/TDDE01 Labb/TDDE01 labb/assignment1.R')
source('C:/Users/vicke/OneDrive/Dokument/TDDE01 Labb/TDDE01 labb/assignment4.R')
source('C:/Users/vicke/OneDrive/Dokument/TDDE01 Labb/TDDE01 labb/assignment4.R')
source('C:/Users/vicke/OneDrive/Dokument/TDDE01 Labb/TDDE01 labb/assignment4.R')
source('C:/Users/vicke/OneDrive/Dokument/TDDE01 Labb/TDDE01 labb/assignment4.R')
model$lambda.min
source('C:/Users/vicke/OneDrive/Dokument/TDDE01 Labb/TDDE01 labb/assignment4.R')
plot(model,xvar="lambda")
model$lambda.min
source('C:/Users/vicke/OneDrive/Dokument/TDDE01 Labb/TDDE01 labb/assignment4.R')
plot(model,xvar="lambda")
model$lambda.min
source('C:/Users/vicke/OneDrive/Dokument/TDDE01 Labb/TDDE01 labb/assignment4.R')
model$lambda.min
model$lambda.min
source('C:/Users/vicke/OneDrive/Dokument/TDDE01 Labb/TDDE01 labb/assignment4.R')
plot(model,xvar="lambda")
model$lambda.min
model$lambda.min
source('C:/Users/vicke/OneDrive/Dokument/TDDE01 Labb/TDDE01 labb/assignment4.R')
model$lambda.min
source('C:/Users/vicke/OneDrive/Dokument/TDDE01 Labb/TDDE01 labb/assignment4.R')
View(data)
source('C:/Users/vicke/OneDrive/Dokument/TDDE01 Labb/TDDE01 labb/assignment4.R')
model$lambda.min
plot(model,xvar="lambda")
model$lambda.min
model = cv.glmnet(x=X,y=Y,alpha=1,family="gaussian",lambda= seq(0,1,0.001))
source('C:/Users/vicke/OneDrive/Dokument/TDDE01 Labb/TDDE01 labb/assignment4.R')
model$lambda.min
plot(model,xvar="lambda")
source('C:/Users/vicke/OneDrive/Dokument/TDDE01 Labb/TDDE01 labb/assignment4.R')
plot(model,xvar="lambda")
model$lambda.min
source('C:/Users/vicke/OneDrive/Dokument/TDDE01 Labb/TDDE01 labb/assignment4.R')
coef(model,s="lambda.min")
model$lambda.min
threshold=0.5
#Train linear regression model on train-data
logistic <- glm(Spam ~ . ,data=train,family="binomial")
data <- read_excel("spambase.xlsx")
#Get stats for traindata
pred_train <- predict(logistic,train,type="response")
confussion(pred_train, train$Spam, "train")
pred_train <- predict(logistic,train,type="response")
confussion(pred_train, train$Spam, "train")
source('C:/Users/vicke/OneDrive/Dokument/TDDE01 Labb/TDDE01 labb/assignment1.R')
#Get stats for traindata
pred_train <- predict(logistic,train,type="response")
confussion(pred_train, train$Spam, "train")
confussion = function(pred,real,name){
pred <- as.numeric(pred>threshold)
conf = table(pred,real)
mcr = 1-sum(diag(conf))/sum(conf)
}
pred <- as.numeric(pred>threshold)
conf = table(pred,real)
mcr = 1-sum(diag(conf))/sum(conf)
pred <- as.numeric(pred>threshold)
conf = table(pred,real)
mcr = 1-sum(diag(conf))/sum(conf)
n=dim(data)[1]
set.seed(12345)
id=sample(1:n, floor(n*0.5))
train=data[id,]
test=data[-id,]
source('C:/Users/vicke/OneDrive/Dokument/TDDE01 Labb/TDDE01 labb/assignment4.R')
source('C:/Users/vicke/OneDrive/Dokument/TDDE01 Labb/TDDE01 labb/assignment4.R')
view(model)
View(model)
source('C:/Users/vicke/OneDrive/Dokument/TDDE01 Labb/TDDE01 labb/assignment4.R')
View(model)
source('C:/Users/vicke/OneDrive/Dokument/TDDE01 Labb/TDDE01 labb/assignment4.R', echo=TRUE)
source('C:/Users/vicke/OneDrive/Dokument/TDDE01 Labb/TDDE01 labb/assignment4.R')
model$lambda.min
coef(model,s="lambda.min")
source('C:/Users/vicke/OneDrive/Dokument/TDDE01 Labb/TDDE01 labb/assignment4.R')
model$lambda.min
plot(model,xvar="lambda")
source('C:/Users/vicke/OneDrive/Dokument/TDDE01 Labb/TDDE01 labb/assignment4.R')
plot(model,xvar="lambda")
model$lambda.min
plot(model,xvar="lambda")
source('C:/Users/vicke/OneDrive/Dokument/TDDE01 Labb/TDDE01 labb/assignment4.R')
plot(model)
source('C:/Users/vicke/OneDrive/Dokument/TDDE01 Labb/TDDE01 labb/assignment4.R')
plot(model)
coef(model,s="lambda.min")
model$lambda.min
plot(model)
plot(model)
model$lambda.min
source('~/.active-rstudio-document')
View(data)
source('C:/Users/vicke/OneDrive/Dokument/TDDE01 Labb/TDDE01 labb/assignment4.R')
View(data)
data[,2]
data[,1]
data[,101]
data[,102]
source('C:/Users/vicke/OneDrive/Dokument/TDDE01 Labb/TDDE01 labb/assignment4.R')
model$lambda.min
where(model$glmnet.fit)
model$glmnet.fit
View(model)
View(model)
coef(model,s="lambda.min")
where(coef(model,s="lambda.min")==0)
coef(model,s="lambda.min")==0
model = cv.glmnet(x=X,y=Y,alpha=1,family="gaussian",lambda= seq(0,1,0.001),nfolds=30)
plot(model)
model$lambda.min
model = cv.glmnet(x=X,y=Y,alpha=1,family="gaussian",lambda= seq(0,1,0.001),nfolds=30)
model = cv.glmnet(x=X,y=Y,alpha=1,family="gaussian",lambda= seq(0,1,0.001),nfolds=50)
plot(model)
model$lambda.min
model = cv.glmnet(x=X,y=Y,alpha=1,family="gaussian",lambda= seq(0,1,0.001),nfolds=80)
plot(model)
model$lambda.min
log(0.123)
knnModel = kknn(Spam~.,train,test, k = 30)
knnpred_test = fitted(knnModel)
confussion(knnpred_test,test$Spam, "### knnTest ###")
source('C:/Users/vicke/OneDrive/Dokument/TDDE01 Labb/TDDE01 labb/assignment4.R')
source('C:/Users/vicke/OneDrive/Dokument/TDDE01 Labb/TDDE01 labb/assignment4.R')
plot(model)
#makePolynomialModels(6,train,test)
model <- glm(Fat~ . -Protein - Moisture,data=train,family="gaussian")
modelAIC = stepAIC(model,trace=FALSE,direction="backward")
modelAIC$coefficients
length(modelAIC$coefficients)
modelAIC = stepAIC(model,trace=FALSE,direction="both")
length(modelAIC$coefficients)
model <- glm(Fat~ . ,data=train,family="gaussian")
modelAIC = stepAIC(model,trace=FALSE,direction="backward")
length(modelAIC$coefficients)
model <- glm(Fat~ . -Protein - Moisture,data=data,family="gaussian")
modelAIC = stepAIC(model,trace=FALSE,direction="backward")
length(modelAIC$coefficients)
X = as.matrix(scale(data[,2:101]))
Y = scale(data$Fat)
model <- glm(Y ~ X,data=data,family="gaussian")
modelAIC = stepAIC(model,trace=FALSE,direction="backward")
length(modelAIC$coefficients)
model <- glm(Fat~ . -Sample -Protein - Moisture,data=data,family="gaussian")
modelAIC = stepAIC(model,trace=FALSE,direction="backward")
length(modelAIC$coefficients)
source('C:/Users/vicke/OneDrive/Dokument/TDDE01 Labb/TDDE01 labb/assignment4.R')
model$lambda.min
plot(model)
source('C:/Users/vicke/OneDrive/Dokument/TDDE01 Labb/TDDE01 labb/assignment4.R')
library(tensorflow) # You may also need to run this if you don't have an existing tensorflow installation.
source('C:/Users/vicke/OneDrive - Linköpings universitet/advML/lab3/RL_Lab2.R')
Y
source('C:/Users/vicke/OneDrive - Linköpings universitet/advML/lab3/RL_Lab1.R')
source('C:/Users/vicke/OneDrive - Linköpings universitet/advML/lab3/RL_Lab2.R')
source('C:/Users/vicke/OneDrive - Linköpings universitet/advML/lab3/RL_Lab2.R')
source('C:/Users/vicke/OneDrive - Linköpings universitet/advML/lab3/RL_Lab2.R')
source('C:/Users/vicke/OneDrive - Linköpings universitet/advML/lab3/RL_Lab2.R')
source('C:/Users/vicke/OneDrive - Linköpings universitet/advML/lab3/RL_Lab1.R')
source('C:/Users/vicke/OneDrive - Linköpings universitet/advML/lab3/RL_Lab1.R')
source('C:/Users/vicke/OneDrive - Linköpings universitet/advML/lab3/RL_Lab1.R')
H <- 5
W <- 7
reward_map <- matrix(0, nrow = H, ncol = W)
reward_map[3,6] <- 10
reward_map[2:4,3] <- -1
q_table <- array(0,dim = c(H,W,4))
vis_environment()
for(i in 1:10000){
foo <- q_learning(start_state = c(3,1))
if(any(i==c(10,100,1000,10000)))
vis_environment(i)
}
vis_environment()
vis_environment()
Environment A (learning)
H <- 5
W <- 7
reward_map <- matrix(0, nrow = H, ncol = W)
reward_map[3,6] <- 10
reward_map[2:4,3] <- -1
q_table <- array(0,dim = c(H,W,4))
vis_environment()
for(i in 1:10000){
foo <- q_learning(start_state = c(3,1))
if(any(i==c(10)))
vis_environment(i)
}
learning)
H <- 5
W <- 7
reward_map <- matrix(0, nrow = H, ncol = W)
reward_map[3,6] <- 10
reward_map[2:4,3] <- -1
q_table <- array(0,dim = c(H,W,4))
vis_environment()
for(i in 1:10000){
foo <- q_learning(start_state = c(3,1))
if(any(i==c(100)))
vis_environment(i)
}
ing)
H <- 5
W <- 7
reward_map <- matrix(0, nrow = H, ncol = W)
reward_map[3,6] <- 10
reward_map[2:4,3] <- -1
q_table <- array(0,dim = c(H,W,4))
vis_environment()
for(i in 1:10000){
foo <- q_learning(start_state = c(3,1))
if(any(i==c(10,100,1000,10000)))
vis_environment(i)
}
# Environment A (learning)
H <- 5
W <- 7
reward_map <- matrix(0, nrow = H, ncol = W)
reward_map[3,6] <- 10
reward_map[2:4,3] <- -1
q_table <- array(0,dim = c(H,W,4))
vis_environment()
for(i in 1:10000){
foo <- q_learning(start_state = c(3,1))
if(any(i==c(10,100,1000,10000)))
vis_environment(i)
}
# Environment B (the effect of epsilon and gamma)
H <- 7
W <- 8
reward_map <- matrix(0, nrow = H, ncol = W)
reward_map[1,] <- -1
reward_map[7,] <- -1
reward_map[4,5] <- 5
reward_map[4,8] <- 10
q_table <- array(0,dim = c(H,W,4))
vis_environment()
MovingAverage <- function(x, n){
cx <- c(0,cumsum(x))
rsum <- (cx[(n+1):length(cx)] - cx[1:(length(cx) - n)]) / n
return (rsum)
}
for(j in c(0.5,0.75,0.95)){
q_table <- array(0,dim = c(H,W,4))
reward <- NULL
correction <- NULL
for(i in 1:30000){
foo <- q_learning(gamma = j, start_state = c(4,1))
reward <- c(reward,foo[1])
correction <- c(correction,foo[2])
}
vis_environment(i, gamma = j)
plot(MovingAverage(reward,100),type = "l")
plot(MovingAverage(correction,100),type = "l")
}
for(j in c(0.5,0.75,0.95)){
q_table <- array(0,dim = c(H,W,4))
reward <- NULL
correction <- NULL
for(i in 1:30000){
foo <- q_learning(epsilon = 0.1, gamma = j, start_state = c(4,1))
reward <- c(reward,foo[1])
correction <- c(correction,foo[2])
}
vis_environment(i, epsilon = 0.1, gamma = j)
plot(MovingAverage(reward,100),type = "l")
plot(MovingAverage(correction,100),type = "l")
}
vis_environment(i, epsilon = 0.1, gamma = j)
for(j in c(0.75)){
q_table <- array(0,dim = c(H,W,4))
reward <- NULL
correction <- NULL
for(i in 1:30000){
foo <- q_learning(epsilon = 0.1, gamma = j, start_state = c(4,1))
reward <- c(reward,foo[1])
correction <- c(correction,foo[2])
}
vis_environment(i, epsilon = 0.1, gamma = j)
plot(MovingAverage(reward,100),type = "l")
plot(MovingAverage(correction,100),type = "l")
}
vis_environment(i, epsilon = 0.1, gamma = j)
plot(MovingAverage(reward,100),type = "l")
plot(MovingAverage(correction,100),type = "l")
for(j in c(0.95)){
q_table <- array(0,dim = c(H,W,4))
reward <- NULL
correction <- NULL
for(i in 1:30000){
foo <- q_learning(epsilon = 0.1, gamma = j, start_state = c(4,1))
reward <- c(reward,foo[1])
correction <- c(correction,foo[2])
}
vis_environment(i, epsilon = 0.1, gamma = j)
plot(MovingAverage(reward,100),type = "l")
plot(MovingAverage(correction,100),type = "l")
}
vis_environment(i, epsilon = 0.1, gamma = j)
plot(MovingAverage(reward,100),type = "l")
plot(MovingAverage(correction,100),type = "l")
for(j in c(0.5)){
q_table <- array(0,dim = c(H,W,4))
reward <- NULL
correction <- NULL
for(i in 1:30000){
foo <- q_learning(epsilon = 0.1, gamma = j, start_state = c(4,1))
reward <- c(reward,foo[1])
correction <- c(correction,foo[2])
}
vis_environment(i, epsilon = 0.1, gamma = j)
plot(MovingAverage(reward,100),type = "l")
plot(MovingAverage(correction,100),type = "l")
}
vis_environment(i, epsilon = 0.1, gamma = j)
plot(MovingAverage(reward,100),type = "l")
plot(MovingAverage(correction,100),type = "l")
for(j in c(0.5)){
q_table <- array(0,dim = c(H,W,4))
reward <- NULL
correction <- NULL
for(i in 1:30000){
foo <- q_learning(gamma = j, start_state = c(4,1))
reward <- c(reward,foo[1])
correction <- c(correction,foo[2])
}
vis_environment(i, gamma = j)
plot(MovingAverage(reward,100),type = "l")
plot(MovingAverage(correction,100),type = "l")
}
vis_environment(i, gamma = j)
plot(MovingAverage(reward,100),type = "l")
plot(MovingAverage(correction,100),type = "l")
for(j in c(0.75)){
q_table <- array(0,dim = c(H,W,4))
reward <- NULL
correction <- NULL
for(i in 1:30000){
foo <- q_learning(gamma = j, start_state = c(4,1))
reward <- c(reward,foo[1])
correction <- c(correction,foo[2])
}
vis_environment(i, gamma = j)
plot(MovingAverage(reward,100),type = "l")
plot(MovingAverage(correction,100),type = "l")
}
vis_environment(i, gamma = j)
plot(MovingAverage(reward,100),type = "l")
plot(MovingAverage(correction,100),type = "l")
for(j in c(0.95)){
q_table <- array(0,dim = c(H,W,4))
reward <- NULL
correction <- NULL
for(i in 1:30000){
foo <- q_learning(gamma = j, start_state = c(4,1))
reward <- c(reward,foo[1])
correction <- c(correction,foo[2])
}
vis_environment(i, gamma = j)
plot(MovingAverage(reward,100),type = "l")
plot(MovingAverage(correction,100),type = "l")
}
vis_environment(i, gamma = j)
plot(MovingAverage(reward,100),type = "l")
plot(MovingAverage(correction,100),type = "l")
setwd("C:/Users/vicke/OneDrive - Linköpings universitet/advML/lab4")
source('C:/Users/vicke/OneDrive - Linköpings universitet/advML/lab4/Lab4 2,3.r')
source('C:/Users/vicke/OneDrive - Linköpings universitet/advML/lab4/Lab4 2,3.r')
source('C:/Users/vicke/OneDrive - Linköpings universitet/advML/lab4/Lab4 2,3.r')
max(small.data$temp)
min(small.data$temp)
plotGP(fstar, NULL, small.data$time, small.data$time, small.data$temp)
plotGP(fstar, fvar, small.data$time, small.data$time, small.data$temp)
plotGP(fstar, NULL, small.data$time, small.data$time, small.data$temp)
plotGP(fstar, fvar, small.data$time, small.data$time, small.data$temp)
plotGP(fstar, fvar, small.data$time, small.data$time, small.data$temp)
lines(x = small.data$time,
day.fstar,
col = "red",
lwd = 2)
plotGP(period.fstar,
period.fvar,
small.data$time,
small.data$time,
small.data$temp)
